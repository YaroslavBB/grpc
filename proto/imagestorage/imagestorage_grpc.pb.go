// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/imagestorage/imagestorage.proto

package imagestorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageStorageClient is the client API for ImageStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageStorageClient interface {
	SaveImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*SaveImageResponse, error)
	FindImage(ctx context.Context, in *FindImageRequest, opts ...grpc.CallOption) (*Image, error)
	LoadImageList(ctx context.Context, in *LoadImageListRequest, opts ...grpc.CallOption) (*ImageInfoList, error)
}

type imageStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewImageStorageClient(cc grpc.ClientConnInterface) ImageStorageClient {
	return &imageStorageClient{cc}
}

func (c *imageStorageClient) SaveImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*SaveImageResponse, error) {
	out := new(SaveImageResponse)
	err := c.cc.Invoke(ctx, "/imagestorage.ImageStorage/SaveImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageStorageClient) FindImage(ctx context.Context, in *FindImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/imagestorage.ImageStorage/FindImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageStorageClient) LoadImageList(ctx context.Context, in *LoadImageListRequest, opts ...grpc.CallOption) (*ImageInfoList, error) {
	out := new(ImageInfoList)
	err := c.cc.Invoke(ctx, "/imagestorage.ImageStorage/LoadImageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageStorageServer is the server API for ImageStorage service.
// All implementations must embed UnimplementedImageStorageServer
// for forward compatibility
type ImageStorageServer interface {
	SaveImage(context.Context, *Image) (*SaveImageResponse, error)
	FindImage(context.Context, *FindImageRequest) (*Image, error)
	LoadImageList(context.Context, *LoadImageListRequest) (*ImageInfoList, error)
	mustEmbedUnimplementedImageStorageServer()
}

// UnimplementedImageStorageServer must be embedded to have forward compatible implementations.
type UnimplementedImageStorageServer struct {
}

func (UnimplementedImageStorageServer) SaveImage(context.Context, *Image) (*SaveImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveImage not implemented")
}
func (UnimplementedImageStorageServer) FindImage(context.Context, *FindImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindImage not implemented")
}
func (UnimplementedImageStorageServer) LoadImageList(context.Context, *LoadImageListRequest) (*ImageInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadImageList not implemented")
}
func (UnimplementedImageStorageServer) mustEmbedUnimplementedImageStorageServer() {}

// UnsafeImageStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageStorageServer will
// result in compilation errors.
type UnsafeImageStorageServer interface {
	mustEmbedUnimplementedImageStorageServer()
}

func RegisterImageStorageServer(s grpc.ServiceRegistrar, srv ImageStorageServer) {
	s.RegisterService(&ImageStorage_ServiceDesc, srv)
}

func _ImageStorage_SaveImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageStorageServer).SaveImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imagestorage.ImageStorage/SaveImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageStorageServer).SaveImage(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageStorage_FindImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageStorageServer).FindImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imagestorage.ImageStorage/FindImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageStorageServer).FindImage(ctx, req.(*FindImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageStorage_LoadImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadImageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageStorageServer).LoadImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imagestorage.ImageStorage/LoadImageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageStorageServer).LoadImageList(ctx, req.(*LoadImageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageStorage_ServiceDesc is the grpc.ServiceDesc for ImageStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imagestorage.ImageStorage",
	HandlerType: (*ImageStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveImage",
			Handler:    _ImageStorage_SaveImage_Handler,
		},
		{
			MethodName: "FindImage",
			Handler:    _ImageStorage_FindImage_Handler,
		},
		{
			MethodName: "LoadImageList",
			Handler:    _ImageStorage_LoadImageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/imagestorage/imagestorage.proto",
}
